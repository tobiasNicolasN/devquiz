[
  {
    "question": "What is a key feature of TypeScript?",
    "responses": [
      { "response": "Dynamic typing", "correct": false },
      { "response": "Static typing", "correct": true },
      { "response": "No compilation needed", "correct": false },
      { "response": "Built-in testing framework", "correct": false }
    ]
  },
  {
    "question": "What does the 'any' type represent in TypeScript?",
    "responses": [
      { "response": "A number", "correct": false },
      { "response": "A boolean", "correct": false },
      { "response": "A type that can be anything", "correct": true },
      { "response": "A string", "correct": false }
    ]
  },
  {
    "question": "How do you declare a variable with a specific type in TypeScript?",
    "responses": [
      { "response": "let myVar = 'Hello'", "correct": false },
      { "response": "let myVar: string = 'Hello'", "correct": true },
      { "response": "string myVar = 'Hello'", "correct": false },
      { "response": "myVar: string = 'Hello'", "correct": false }
    ]
  },
  {
    "question": "Which of the following is a TypeScript utility type?",
    "responses": [
      { "response": "interface", "correct": false },
      { "response": "string", "correct": false },
      { "response": "module", "correct": false },
      { "response": "Partial", "correct": true }
    ]
  },
  {
    "question": "What is the purpose of 'interfaces' in TypeScript?",
    "responses": [
      { "response": "Declare a function", "correct": false },
      { "response": "Define the structure of an object", "correct": true },
      { "response": "Enforce class inheritance", "correct": false },
      { "response": "Manage asynchronous code", "correct": false }
    ]
  },
  {
    "question": "In TypeScript, which keyword is used to indicate that a class member is only accessible within the class?",
    "responses": [
      { "response": "public", "correct": false },
      { "response": "protected", "correct": false },
      { "response": "private", "correct": true },
      { "response": "readonly", "correct": false }
    ]
  },
  {
    "question": "What is a tuple in TypeScript?",
    "responses": [
      {
        "response": "A type that allows multiple types in a single array",
        "correct": true
      },
      { "response": "A type of loop", "correct": false },
      { "response": "A special type of object", "correct": false },
      { "response": "A way to handle promises", "correct": false }
    ]
  },
  {
    "question": "Which of the following is not a valid type in TypeScript?",
    "responses": [
      { "response": "number", "correct": false },
      { "response": "tuple", "correct": true },
      { "response": "void", "correct": false },
      { "response": "never", "correct": false }
    ]
  },
  {
    "question": "How are exceptions handled in TypeScript?",
    "responses": [
      { "response": "Using type assertions", "correct": false },
      { "response": "Using event listeners", "correct": false },
      { "response": "Using async/await", "correct": false },
      { "response": "Using try and catch blocks", "correct": true }
    ]
  },
  {
    "question": "What is a benefit of using TypeScript?",
    "responses": [
      { "response": "Automatic UI generation", "correct": false },
      { "response": "Faster code execution", "correct": false },
      { "response": "No external libraries needed", "correct": false },
      {
        "response": "Better code readability and maintainability",
        "correct": true
      }
    ]
  },
  {
    "question": "In TypeScript, what does the 'readonly' modifier do?",
    "responses": [
      { "response": "Makes a class member read-only", "correct": true },
      { "response": "Prevents a class from being extended", "correct": false },
      { "response": "Allows only primitive types", "correct": false },
      { "response": "Creates a singleton class", "correct": false }
    ]
  },
  {
    "question": "What is the purpose of generics in TypeScript?",
    "responses": [
      {
        "response": "Create functions and classes that work with any type of data",
        "correct": true
      },
      { "response": "Generate random data types", "correct": false },
      { "response": "Enforce strict data types", "correct": false },
      { "response": "Compile TypeScript code faster", "correct": false }
    ]
  },
  {
    "question": "Which of the following is a TypeScript feature not present in JavaScript?",
    "responses": [
      { "response": "Arrow functions", "correct": false },
      { "response": "Optional chaining", "correct": false },
      { "response": "Enums", "correct": true },
      { "response": "Async functions", "correct": false }
    ]
  },
  {
    "question": "Which of the following options best describes 'type assertion' in TypeScript?",
    "responses": [
      {
        "response": "Declaring a variable with multiple types",
        "correct": false
      },
      {
        "response": "Creating a type from an existing object",
        "correct": false
      },
      {
        "response": "Forcing a variable to be treated as a specific type",
        "correct": true
      },
      { "response": "Converting a type to an interface", "correct": false }
    ]
  },
  {
    "question": "What does the 'void' type represent in TypeScript?",
    "responses": [
      { "response": "A value that never occurs", "correct": false },
      { "response": "A variable with an undefined type", "correct": false },
      { "response": "A null value", "correct": false },
      { "response": "A function that does not return a value", "correct": true }
    ]
  },
  {
    "question": "Which React hook is used to manage state in functional components?",
    "responses": [
      { "response": "useEffect", "correct": false },
      { "response": "useRef", "correct": false },
      { "response": "useReducer", "correct": false },
      { "response": "useState", "correct": true }
    ]
  },
  {
    "question": "What does JSX stand for in React?",
    "responses": [
      { "response": "JavaScript XML", "correct": true },
      { "response": "JavaScript Extension", "correct": false },
      { "response": "JSON Syntax", "correct": false },
      { "response": "JavaScript XHR", "correct": false }
    ]
  },
  {
    "question": "In Next.js, which method is used to fetch data at build time?",
    "responses": [
      { "response": "getServerSideProps", "correct": false },
      { "response": "useEffect", "correct": false },
      { "response": "getStaticProps", "correct": true },
      { "response": "useState", "correct": false }
    ]
  },
  {
    "question": "What is the default styling language for Next.js projects?",
    "responses": [
      { "response": "Sass", "correct": false },
      { "response": "Styled Components", "correct": false },
      { "response": "LESS", "correct": false },
      { "response": "CSS Modules", "correct": true }
    ]
  },
  {
    "question": "What is a benefit of server-side rendering in Next.js?",
    "responses": [
      { "response": "Faster API requests", "correct": false },
      { "response": "Better SEO", "correct": true },
      { "response": "Easier state management", "correct": false },
      { "response": "Fewer HTTP requests", "correct": false }
    ]
  },
  {
    "question": "In HTML, which tag is used to define the largest heading?",
    "responses": [
      { "response": "<h1>", "correct": true },
      { "response": "<h6>", "correct": false },
      { "response": "<heading>", "correct": false },
      { "response": "<title>", "correct": false }
    ]
  },
  {
    "question": "Which CSS property is used to change the background color?",
    "responses": [
      { "response": "color", "correct": false },
      { "response": "bgcolor", "correct": false },
      { "response": "background-color", "correct": true },
      { "response": "background", "correct": false }
    ]
  },
  {
    "question": "In CSS, what does the abbreviation 'CSS' stand for?",
    "responses": [
      { "response": "Computer Style Sheets", "correct": false },
      { "response": "Cascading Style Sheets", "correct": true },
      { "response": "Creative Style Sheets", "correct": false },
      { "response": "Colorful Style Sheets", "correct": false }
    ]
  },
  {
    "question": "What is the purpose of 'flexbox' in CSS?",
    "responses": [
      { "response": "Create animations", "correct": false },
      { "response": "Layout and align items", "correct": true },
      { "response": "Define color schemes", "correct": false },
      { "response": "Control typography", "correct": false }
    ]
  },
  {
    "question": "In CSS, how do you select an element with the class 'container'?",
    "responses": [
      { "response": "#container", "correct": false },
      { "response": ".container", "correct": true },
      { "response": "container", "correct": false },
      { "response": "element.container", "correct": false }
    ]
  },
  {
    "question": "What is the purpose of 'media queries' in CSS?",
    "responses": [
      {
        "response": "Apply styles based on device characteristics",
        "correct": true
      },
      { "response": "Optimize images for the web", "correct": false },
      { "response": "Define custom fonts", "correct": false },
      { "response": "Manage animations", "correct": false }
    ]
  },
  {
    "question": "What does 'POO' stand for in programming?",
    "responses": [
      { "response": "Program Optimization Operations", "correct": false },
      { "response": "Primary Object Oriented", "correct": false },
      { "response": "Programming Object Orientation", "correct": false },
      { "response": "Object-Oriented Programming", "correct": true }
    ]
  },
  {
    "question": "What is encapsulation in Object-Oriented Programming?",
    "responses": [
      {
        "response": "Hiding internal state and requiring all interaction to be performed through an object's methods",
        "correct": true
      },
      {
        "response": "The ability of different objects to share state",
        "correct": false
      },
      {
        "response": "Combining multiple classes into a single class",
        "correct": false
      },
      {
        "response": "Extending the properties and methods of a class",
        "correct": false
      }
    ]
  },
  {
    "question": "What is a constructor in OOP?",
    "responses": [
      {
        "response": "A special method used to initialize objects",
        "correct": true
      },
      { "response": "A function that destroys an object", "correct": false },
      { "response": "A type of variable", "correct": false },
      { "response": "A class that cannot be extended", "correct": false }
    ]
  },
  {
    "question": "In OOP, what does 'abstraction' mean?",
    "responses": [
      {
        "response": "The process of hiding implementation details and showing only essential functionality",
        "correct": true
      },
      { "response": "Creating objects from classes", "correct": false },
      {
        "response": "The ability of an object to take many forms",
        "correct": false
      },
      {
        "response": "The process of iterating over a collection",
        "correct": false
      }
    ]
  },
  {
    "question": "What is an object in OOP?",
    "responses": [
      { "response": "A class that cannot be extended", "correct": false },
      { "response": "A function within a class", "correct": false },
      { "response": "A primitive data type", "correct": false },
      { "response": "An instance of a class", "correct": true }
    ]
  },
  {
    "question": "Which of the following is NOT a principle of OOP?",
    "responses": [
      { "response": "Polymorphism", "correct": false },
      { "response": "Inheritance", "correct": false },
      { "response": "Abstraction", "correct": false },
      { "response": "Recursion", "correct": true }
    ]
  },
  {
    "question": "In JavaScript, what is the output of `typeof null`?",
    "responses": [
      { "response": "null", "correct": false },
      { "response": "object", "correct": true },
      { "response": "undefined", "correct": false },
      { "response": "boolean", "correct": false }
    ]
  },
  {
    "question": "In JavaScript, what is the difference between `==` and `===`?",
    "responses": [
      {
        "response": "`==` compares values after converting them to a common type, while `===` compares both value and type",
        "correct": true
      },
      {
        "response": "`==` compares values and types, while `===` compares only values",
        "correct": false
      },
      {
        "response": "`===` converts values to a common type before comparing",
        "correct": false
      },
      { "response": "`==` is an assignment operator", "correct": false }
    ]
  },
  {
    "question": "What is a promise in JavaScript?",
    "responses": [
      {
        "response": "An object that represents the eventual completion (or failure) of an asynchronous operation",
        "correct": true
      },
      { "response": "A function that executes immediately", "correct": false },
      { "response": "A method for iterating over arrays", "correct": false },
      { "response": "A logical operator", "correct": false }
    ]
  },
  {
    "question": "In JavaScript, how do you declare an arrow function?",
    "responses": [
      { "response": "function() {}", "correct": false },
      { "response": "=> () {}", "correct": false },
      { "response": "() => {}", "correct": true },
      { "response": "() -> {}", "correct": false }
    ]
  }
]
